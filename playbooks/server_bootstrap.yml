---
- name: Galaxie bootstrap for new host
  hosts: galaxie_staging
  become: yes

  vars:
    rsa_key_size: "4096"

  pre_tasks:
######
# Checks, lookups and new facts
######
    - name: compute facts
      set_fact:
        host_key_path: "{{ inventory_dir }}/keys/{{ inventory_hostname }}"
        target_port: "{{ ansible_port|default('22', true) }}"

    - name: check mandatory variable galaxie.user
      fail: msg="galaxie.user is undefined"
      when: not galaxie.user

    - name: lookup galaxie.user password
      set_fact:
        galaxie_passwd: "{{ lookup('password', inventory_dir + '/secrets/' + ansible_hostname + '.' + galaxie.user +'.passwd chars=ascii_letters,digits,hexdigits,punctuation') }}"
      delegate_to: localhost
      become: no

    - name: host key is in place
      stat:
        path="{{ host_key_path }}"
      register: host_key_presence
      delegate_to: localhost
      become: no

    - name: host key is in place
      stat:
        path="/etc/ssh/.glx_generated_keys"
      register: glx_generated_keys

    - name: compute facts
      set_fact:
        need_server_key_regen: not glx_generated_keys.stat.exists
        need_host_key_regen: not host_key_presence.stat.exists
        need_to_ban_current_key: ansible_ssh_private_key_file is defined and ansible_user != galaxie.user
######
# Host basic setup
######
    - script: files/ansible-seed.sh

    - name: galaxie group is present
      group:
        name="{{ galaxie.user }}"
        gid=42000
        state=present

    - name: galaxie user is present
      user:
        name="{{ galaxie.user }}"
        uid=42000
        groups="{{ galaxie.user }},sudo"
        generate_ssh_key=yes
        state=present
        shell=/bin/bash

    - name: /home/{{ galaxie.user }}/.bashrc is ok
      copy:
        src=etc_skel_bashrc
        dest=/home/{{ galaxie.user }}/.bashrc
        owner={{ galaxie.user }}
        group={{ galaxie.user }}
        mode=0644

    - name: set permissions of /home/{{ galaxie.user }}/ directory
      file:
        path=/home/{{ galaxie.user }}
        owner={{ galaxie.user }}
        group={{ galaxie.user }}
        state=directory
        mode=0750

    - name: Change password for galaxie
      shell: >
        usermod -p $(echo '{{ galaxie_passwd }}' | openssl passwd -1 -stdin) {{ galaxie.user }}
######
# SSH key black magic
######
    - name: generate new host key {{ host_key_path }}
      when: need_host_key_regen
      command: "ssh-keygen -t rsa -b {{ rsa_key_size }} -f {{ host_key_path }}"
      delegate_to: localhost
      become: no

    - name: host_key is authorized for user
      authorized_key:
        user="{{ galaxie.user }}"
        key="{{ lookup('file', host_key_path + '.pub') }}"
        state=present
        exclusive=yes

    - name: current key is banished for ansible_user
      when: need_to_ban_current_key
      authorized_key:
        user="{{ ansible_user }}"
        key="{{ lookup('file', ansible_ssh_private_key_file + '.pub') }}"
        state=absent

    - name: galaxie.user is sudoer
      lineinfile: >
        dest=/etc/sudoers.d/galaxie.user
        regexp='^{{ galaxie.user }}'
        line='{{ galaxie.user }} ALL=(ALL) NOPASSWD: ALL'
        state='present'
        validate='visudo -cf %s'
        create=yes

  roles:
    - ntp-client

  tasks:

# [inspired_by] http://www.cyberciti.biz/faq/howto-regenerate-openssh-host-keys/
    - name: cleaning old ssh_keys
      shell: /bin/rm -f /etc/ssh/ssh_host_*
      when: need_server_key_regen

    - name: cleaning old ssh_keys
      shell: /usr/sbin/dpkg-reconfigure openssh-server
      when: need_server_key_regen

    - name: leaving trace of key generation
      file:
        path="/etc/ssh/.glx_generated_keys"
        owner=root
        group=root
        state=touch
      when: need_server_key_regen

    - name: delete known fingerprint of host
      shell: "ssh-keygen -R [{{ inventory_hostname }}]:{{ target_port }}"
      delegate_to: localhost
      become: no
      when: need_server_key_regen

    - name: add new fingerprint of host to known host
      shell: "ssh-keyscan -p {{ target_port }} {{ inventory_hostname }} >> ~/.ssh/known_hosts"
      delegate_to: localhost
      become: no
      when: need_server_key_regen

    - name: generating host variables files {{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml
      lineinfile:
        dest="{{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml"
        line="{{ item.line }}"
        insertbefore="{{ item.insert_marker }}"
        create=yes
      delegate_to: localhost
      become: no
      with_items:
        - line: "---"
          insert_marker: "BOF"
        - line: "ansible_ssh_private_key_file: {{ host_key_path }}"
          insert_marker: "EOF"
        - line: "ansible_user: {{ galaxie.user }}"
          insert_marker: "EOF"
        - line: "ansible_port: {{ target_port }}"
          insert_marker: "EOF"
