---
- name: Galaxie
  hosts: galaxie_staging
  become: yes

  vars:
    galaxie:
      user: zoe


  pre_tasks:
    - fail: msg="galaxie.user is undefined"
      when: not galaxie.user

    - set_fact:
        newKey: "{{ inventory_dir }}/keys/{{ inventory_hostname }}"

    - name: New key is present
      stat:
        path="{{ newKey }}"
      register: localKey
      delegate_to: localhost
      become: no

    - name: New key not present => generation
      command: "ssh-keygen -t rsa -b 2048 -f {{newKey}}"
      when: newKey is defined and not localKey.stat.exists
      delegate_to: localhost
      become: no

    - script: files/ansible-seed.sh

    - name: Group is present
      group:
        name="{{ galaxie.user }}"
        gid=4200
        state=present

    - name: User is present
      user:
        name="{{ galaxie.user }}"
        uid=4200
        groups="{{ galaxie.user }},sudo"
        generate_ssh_key=yes
        state=present
        shell=/bin/bash

    - name: /home/{{ galaxie.user }}/.bashrc is ok
      copy:
        src=etc_skel_bashrc
        dest=/home/{{ galaxie.user }}/.bashrc
        owner={{ galaxie.user }}
        group={{ galaxie.user }}
        mode=0644

    - name: set permissions of /home/{{ galaxie.user }}/ directory
      file:
        path=/home/{{ galaxie.user }}
        owner={{ galaxie.user }}
        group={{ galaxie.user }}
        state=directory
        mode=0750

    #- name: Change password for galaxie
     # shell: >
     #   usermod -p $(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 | openssl passwd -1 -stdin) {{ galaxie.user }}

    #- name: Change password for current user
      #shell: >
      #  usermod -p $(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 | mkpasswd --method=SHA-512 --stdin) {{ ansible_user_id }}
      #when: newPassword is defined and newPassword != ""

    - name: New key is authorized for user
      when: newKey is defined
      authorized_key:
        user="{{ galaxie.user }}"
        key="{{ lookup('file', newKey+'.pub') }}"
        state=present

    - name: Current key is banished for user
      when: newKey is defined and ansible_ssh_private_key_file is defined
      authorized_key:
        user="{{ galaxie.user }}"
        key="{{ lookup('file', ansible_ssh_private_key_file+'.pub') }}"
#        state=absent

# TODO cosmetic
    - name: User is sudoer
      lineinfile: >
        dest=/etc/sudoers
        state='present'
        regexp='^{{ galaxie.user }}'
        line='{{ galaxie.user }} ALL=(ALL) NOPASSWD: ALL'
        validate='visudo -cf %s'

  roles:
    - ntp-client

  tasks:
# regenerer les clÃ©s serveur
# [inspired_by] http://www.cyberciti.biz/faq/howto-regenerate-openssh-host-keys/

    - name: CHECK - key generation trace is present
      shell: if [ -f "/etc/ssh/.glx_generated_keys" ]; then /bin/true; else /bin/false; fi
      register: glx_generated_keys
      ignore_errors: true

    - name: cleaning old ssh_keys
      shell: /bin/rm -f /etc/ssh/ssh_host_*
      #when: glx_generated_keys|failed

    - name: cleaning old ssh_keys
      shell: /usr/sbin/dpkg-reconfigure openssh-server
      #when: glx_generated_keys|failed

    - name: leaving trace of key generation
      file:
        path="/etc/ssh/.glx_generated_keys"
        owner=root
        group=root
        state=touch
      #when: glx_generated_keys|failed

    - set_fact:
        target_port: "{{ ansible_port|default('22', true) }}"

    - script: files/update-server-fingerprint.sh {{ inventory_hostname }} {{ target_port }}
      delegate_to: localhost
      become: no
      #when: glx_generated_keys|failed

    - lineinfile:
        dest="{{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml"
        line="---"
        insertbefore="BOF"
        create=yes
      delegate_to: localhost
      become: no

    - lineinfile: >
        dest="{{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml"
        line="ansible_ssh_private_key_file: {{ newKey }}"
        insertafter="EOF"
      delegate_to: localhost
      become: no

    - lineinfile: >
        dest="{{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml"
        line="ansible_user: {{ galaxie.user }}"
        insertafter="EOF"
      delegate_to: localhost
      become: no
